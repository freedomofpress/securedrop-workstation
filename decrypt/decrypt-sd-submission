#!/usr/bin/env python

import sys
import tarfile
import tempfile
import os
import fnmatch
import zipfile
import glob
import subprocess
import shutil

input = sys.argv[1]

# a nice place to work...
tmpdir = tempfile.mkdtemp()

# we get given a tarball of everything the user has downloaded.
# first step, extract that archive
with tarfile.open(input) as tar:
  # potentially unsafe, can create arbitrary files on the filesystem
  # given a malicious tarball
  tar.extractall(tmpdir)

# some files may be zips, some may be .gpg
# let's unzip the zip files here to produce .gpg files
zips = glob.glob(tmpdir + "/*zip")
for z in zips:
  with zipfile.ZipFile(z) as zf:
    zf.extractall(tmpdir + "/extracted/")
  os.unlink(z)

# great, we should be left with a directory tree filled with files
# encrypted to our public key. let's find those and decrypt them
for root, dirnames, filenames in os.walk(tmpdir):
  for fn in fnmatch.filter(filenames, '*.gpg'):
    [fn_no_ext, _] = os.path.splitext(fn)
    out = open(os.path.join(root, fn_no_ext), 'w')

    err = tempfile.NamedTemporaryFile(suffix=".gpg-err")
    res = subprocess.call(["qubes-gpg-client", "--decrypt" , os.path.join(root, fn)], stdout=out, stderr=err)
    out.close()
    os.unlink(os.path.join(root, fn))
    if res != 0:
        with open(err.name) as e:
            msg = e.read()
            subprocess.call(["notify-send", "-i", "face-crying", "Decryption error: {}".format(msg)])
    err.close()

# almost done. docs are gzipped. let's ungzip them.
for root, dirnames, filenames in os.walk(tmpdir):
  for fn in fnmatch.filter(filenames, '*.gz'):
    # maybe sorta lazy, could do this using python gzip module.
    subprocess.call(["gunzip", os.path.join(root, fn)])

# ok. we're going to send all the decrypted stuff to the svs vm.
# let's tar it all up again, so we can `qvm-open-in-vm` it.
fh = tempfile.NamedTemporaryFile(suffix=".sd-xfer-extracted", delete=False)
out_tar = tarfile.open(mode='w', fileobj=fh)
out_tar.add(os.path.join(tmpdir, "extracted"), arcname="extracted")
out_tar.close()
fh.close()

shutil.rmtree(tmpdir)

# finally! ship this off to sd-svs
subprocess.call(["qvm-open-in-vm", "sd-svs", fh.name])
os.unlink(fh.name)

# work around a qubes open-in-vm bug
# (https://groups.google.com/forum/#!topic/qubes-users/dxFa4ZXmPYc)
# shouldn't be an issue for disp vm's
os.unlink(input)
